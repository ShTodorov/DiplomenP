@page "/shopping_cart"
@using DiplomenP.Interfaces;
@using DiplomenP.Models;
@inject IUserService UserService
@inject IOrderService OrderService
@inject NavigationManager NavigationManager

<PageTitle>Shopping cart</PageTitle>

<style>
    span {
        font-weight: normal;
    }
</style>

<style type="text/css" media="screen and (max-width:575px)">

    .px-4 {
        width: 100% !important;
        padding: 0 !important;
    }

</style>

<style type="text/css" media="screen and (max-width:519px)">

    .col-lg-12 {
        padding: 0 !important;
    }
</style>

<style type="text/css" media="screen and (max-width:425px)">

    .price {
        display: none;
    }

</style>

@if (userId != null && cartItems.Count > 0 && cartId != null)
{
    //TODO: Прошерка за несъщестшушеаща колиюка
    <div class="px-4 px-lg-0">

        <div class="pb-5 mt-2">
            <div class="container">

                <div class="row">
                    <div class="col-lg-12 p-5 bg-white rounded shadow-sm mb-5">

                        <!-- Shopping cart table -->
                        <div class="table-responsive">
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th scope="col" class="border-0 bg-light">
                                            <div class="p-2 px-3 text-uppercase">Product</div>
                                        </th>
                                        <th scope="col" class="border-0 bg-light price">
                                            <div class="py-2 text-uppercase">Price</div>
                                        </th>
                                        <th scope="col" class="border-0 bg-light">
                                            <div class="py-2 text-uppercase">Quantity</div>
                                        </th>
                                        <th scope="col" class="border-0 bg-light">
                                            <div class="py-2 text-uppercase">Remove</div>
                                        </th>
                                    </tr>
                                </thead>
                                <tbody>

                                    @foreach (var item in cartItems)
                                    {

                                        <tr>
                                            <th scope="row" class="border-0">
                                                <div class="p-2">
                                                    <img src="@item.CartItemProduct.Image" alt="" width="70" class="img-fluid rounded shadow-sm">
                                                    <div class="ml-3 d-inline-block align-middle">
                                                        <h5 class="mb-0"> <a href="#" class="text-dark d-inline-block align-middle">@item.CartItemProduct.ProductName</a></h5>
                                                        <span class="text-muted d-block"><em>Категория: @item.CartItemProduct.Type</em></span>
                                                    </div>
                                                </div>
                                            </th>
                                            <td class="border-0 align-middle price"><strong>@item.CartItemProduct.Price.ToString("0.00")</strong></td>
                                            <td class="border-0 align-middle">
                                                <input class="form-control text-center" value="@item.Quantity" @onchange="(ChangeEventArgs e) => UpdateItem(e,item)" style="width: 3rem;" />
                                            </td>
                                            <td class="border-0 align-middle">
                                                <button class="btn btn-outline-danger flex-shrink-0" @onclick="() => RemoveCartItem(item.CartItemId)" type="button">–</button>
                                            </td>
                                        </tr>

                                    }

                                </tbody>
                            </table>
                        </div>
                        <!-- End -->
                    </div>
                </div>

                <div class="row py-5 p-4 bg-white rounded shadow-sm">
                    <div class="col-lg-6">
                        <div class="bg-light rounded-pill px-4 py-3 text-uppercase font-weight-bold">Инструкции към поръчката</div>
                        <div class="p-4">
                            <p class="mb-2"><em>Адрес на поръчката:</em></p>
                            <input type="text" class="mb-3 form-control" @bind-value="order.Adress" required>
                            <p class="mb-2"><em>Телефон на получател:</em></p>
                            <input type="text" class="mb-3 form-control" @bind-value="order.PhoneNumber" required>
                            <p class="mb-2"><em>Ако искате да дадете пояснение към поръчката си, може да го напишето в полето отдолу:</em></p>
                            <textarea name="" cols="30" rows="2" class="form-control" @bind="order.OrderDescription"></textarea>
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="bg-light rounded-pill px-4 py-3 text-uppercase font-weight-bold">Вашата поръчка</div>
                        <div class="p-4">
                            <p class="mb-4"><em>Доставката се изчислява спрямо цената на поръчката.</em></p>
                            <ul class="list-unstyled mb-4">
                                <li class="d-flex justify-content-between py-3 border-bottom"><strong class="text-muted">Цена на поръчката</strong><strong>@totalItemsPrice.ToString("0.00") лв.</strong></li>
                                <li class="d-flex justify-content-between py-3 border-bottom"><strong class="text-muted">Доставка</strong><strong>@deliveryPrice</strong></li>
                                <li class="d-flex justify-content-between py-3 border-bottom">
                                    <strong class="text-muted">Общо</strong>
                                    <h5 class="font-weight-bold">@totalOrderPrice.ToString("0.00") лв.</h5>
                                </li>
                            </ul><a href="" class="btn btn-dark rounded-pill py-2 btn-block" @onclick="CreateOrder">Поръчване</a>
                        </div>
                    </div>
                </div>

                <p class="mt-3 text-center text-secondary"><b>Ако искате да видите история на покупките си, натиснете <a href="cart_history">тук</a>.</b></p>

            </div>
        </div>
    </div>

}
else
{
    <h3>За да видите количката, трябва да влезете в профила си или да добавите продукт.</h3>
}

@code {

    // Показване на CartItems в количката за регистрирания потребител

    [Inject]
    private ICartService CartService { get; set; }
   
    private List<CartItem> cartItems = new List<CartItem>();

    private string? userId;

    private Order order = new Order();
    private int deliveryPrice;
    private double totalOrderPrice;
    private int cartId;
    private double totalItemsPrice;

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();


    }
    private async Task RefreshData()
    {
        userId = UserService.GetLoggedUserId();
        cartItems = await CartService.GetCartItemsAsync(userId);
        if (userId != null)
        {

            cartId = await CartService.GetCartId(userId);
            totalItemsPrice = await CartService.GetCartTotalPriceAsync(cartId);

            if (totalItemsPrice > 100)
            {
                deliveryPrice = 0;
            }
            else
            {
                deliveryPrice = 10;
            }

            totalOrderPrice = totalItemsPrice + deliveryPrice;
        }
        
    }

    private async Task RemoveCartItem(int cartItemId)
    {
        await CartService.RemoveCartItemAsync(cartItemId);

        cartItems = await CartService.GetCartItemsAsync(userId);
        totalItemsPrice = await CartService.GetCartTotalPriceAsync(cartId);
        await RefreshData();
        NavigationManager.NavigateTo($"/shopping_cart", forceLoad: true);
        StateHasChanged();
    }


    private async Task UpdateItem(ChangeEventArgs args, CartItem item)
    {
        // Update the item quantity with the new value from the input element
        item.Quantity = int.Parse(args.Value.ToString());
        await CartService.UpdateCartItemAsync(item);
        await RefreshData();
        NavigationManager.NavigateTo($"/shopping_cart", forceLoad: true);
        StateHasChanged();
        //TODO: Update cart item method
    }

    private async Task CreateOrder()
    {
        order.OrderDate = DateTime.Now;
        order.TotalOrderPrice = totalOrderPrice;
        order.OrderCartId = cartId;
        order.OrderCustomerId = userId;

        await OrderService.CreateOrderAsync(order);
    }

}
